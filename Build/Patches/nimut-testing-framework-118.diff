diff --git a/compat/v76/Bootstrap/Bootstrap.php b/compat/v76/Bootstrap/Bootstrap.php
index 74ca4ba..eb849e9 100644
--- a/compat/v76/Bootstrap/Bootstrap.php
+++ b/compat/v76/Bootstrap/Bootstrap.php
@@ -13,6 +13,7 @@
  */

 use Nimut\TestingFramework\Bootstrap\AbstractBootstrap;
+use TYPO3\CMS\Core\Core\Bootstrap as CoreBootstrap;
 use TYPO3\CMS\Core\Package\UnitTestPackageManager;

 /**
@@ -20,6 +21,17 @@
  */
 class Bootstrap extends AbstractBootstrap
 {
+    /**
+     * Bootstrap constructor.
+     *
+     * @param CoreBootstrap $bootstrap
+     */
+    public function __construct(CoreBootstrap $bootstrap = null)
+    {
+        parent::__construct($bootstrap);
+        $this->bootstrap = (null !== $this->bootstrap) ? $this->bootstrap : CoreBootstrap::getInstance();
+    }
+
     /**
      * Includes the Core Bootstrap class and calls its first few functions
      *
diff --git a/compat/v76/TestSystem/TestSystem.php b/compat/v76/TestSystem/TestSystem.php
index 134c4cc..7c6fb25 100644
--- a/compat/v76/TestSystem/TestSystem.php
+++ b/compat/v76/TestSystem/TestSystem.php
@@ -14,6 +14,7 @@

 use Nimut\TestingFramework\Exception\Exception;
 use Nimut\TestingFramework\TestSystem\AbstractTestSystem;
+use TYPO3\CMS\Core\Core\Bootstrap;
 use TYPO3\CMS\Core\Database\DatabaseConnection;
 use TYPO3\CMS\Core\Utility\GeneralUtility;
 use TYPO3\CMS\Extbase\Object\ObjectManager;
@@ -22,6 +23,16 @@

 class TestSystem extends AbstractTestSystem
 {
+    /**
+     * @param string $identifier Name of test case class
+     * @param Bootstrap $bootstrap
+     */
+    public function __construct($identifier, Bootstrap $bootstrap = null)
+    {
+        parent::__construct($identifier, $bootstrap);
+        $this->bootstrap = $this->bootstrap === null ? Bootstrap::getInstance() : $this->bootstrap;
+    }
+
     /**
      * Create tables and import static rows.
      * For functional and acceptance tests.
diff --git a/compat/v87/Bootstrap/Bootstrap.php b/compat/v87/Bootstrap/Bootstrap.php
index e1d1893..9242dd3 100644
--- a/compat/v87/Bootstrap/Bootstrap.php
+++ b/compat/v87/Bootstrap/Bootstrap.php
@@ -22,6 +22,17 @@
  */
 class Bootstrap extends AbstractBootstrap
 {
+    /**
+     * Bootstrap constructor.
+     *
+     * @param CoreBootstrap $bootstrap
+     */
+    public function __construct(CoreBootstrap $bootstrap = null)
+    {
+        parent::__construct($bootstrap);
+        $this->bootstrap = (null !== $this->bootstrap) ? $this->bootstrap : CoreBootstrap::getInstance();
+    }
+
     /**
      * Includes the Core Bootstrap class and calls its first few functions
      *
diff --git a/compat/v87/TestSystem/TestSystem.php b/compat/v87/TestSystem/TestSystem.php
index c69fa8c..28e7cf7 100644
--- a/compat/v87/TestSystem/TestSystem.php
+++ b/compat/v87/TestSystem/TestSystem.php
@@ -14,9 +14,20 @@

 use Nimut\TestingFramework\Exception\Exception;
 use Nimut\TestingFramework\TestSystem\AbstractTestSystem;
+use TYPO3\CMS\Core\Core\Bootstrap;

 class TestSystem extends AbstractTestSystem
 {
+    /**
+     * @param string $identifier Name of test case class
+     * @param Bootstrap $bootstrap
+     */
+    public function __construct($identifier, Bootstrap $bootstrap = null)
+    {
+        parent::__construct($identifier, $bootstrap);
+        $this->bootstrap = $this->bootstrap === null ? Bootstrap::getInstance() : $this->bootstrap;
+    }
+
     /**
      * Includes the Core Bootstrap class and calls its first few functions
      *
diff --git a/composer.json b/composer.json
index 3998999..a07d3c4 100644
--- a/composer.json
+++ b/composer.json
@@ -29,13 +29,13 @@
     ],
     "require": {
         "php": ">= 5.5, < 7.4",
-        "typo3/cms-backend": "^7.6 || ^8.7 || ^9.5 || dev-master",
-        "typo3/cms-core": "^7.6 || ^8.7 || ^9.5 || dev-master",
-        "typo3/cms-extbase": "^7.6 || ^8.7 || ^9.5 || dev-master",
-        "typo3/cms-fluid": "^7.6 || ^8.7 || ^9.5 || dev-master",
-        "typo3/cms-frontend": "^7.6 || ^8.7 || ^9.5 || dev-master",
-        "typo3/cms-install": "^7.6 || ^8.7 || ^9.5 || dev-master",
-        "typo3/cms-recordlist": "^7.6 || ^8.7 || ^9.5 || dev-master",
+        "typo3/cms-backend": "^7.6 || ^8.7 || ^9.5 || ^10.0 || dev-master",
+        "typo3/cms-core": "^7.6 || ^8.7 || ^9.5 || ^10.0 || dev-master",
+        "typo3/cms-extbase": "^7.6 || ^8.7 || ^9.5 || ^10.0 || dev-master",
+        "typo3/cms-fluid": "^7.6 || ^8.7 || ^9.5 || ^10.0 || dev-master",
+        "typo3/cms-frontend": "^7.6 || ^8.7 || ^9.5 || ^10.0 || dev-master",
+        "typo3/cms-install": "^7.6 || ^8.7 || ^9.5 || ^10.0 || dev-master",
+        "typo3/cms-recordlist": "^7.6 || ^8.7 || ^9.5 || ^10.0 || dev-master",
         "phpunit/phpunit": "^6.0 || ^7.0",
         "mikey179/vfsstream": "^1.6"
     },
diff --git a/src/TestingFramework/Bootstrap/AbstractBootstrap.php b/src/TestingFramework/Bootstrap/AbstractBootstrap.php
index c5fdb99..ed6de14 100644
--- a/src/TestingFramework/Bootstrap/AbstractBootstrap.php
+++ b/src/TestingFramework/Bootstrap/AbstractBootstrap.php
@@ -42,7 +42,7 @@ abstract class AbstractBootstrap
     public function __construct(CoreBootstrap $bootstrap = null)
     {
         putenv('TYPO3_CONTEXT=Testing');
-        $this->bootstrap = (null !== $bootstrap) ? $bootstrap : CoreBootstrap::getInstance();
+        $this->bootstrap = $bootstrap;
     }

     /**
@@ -50,15 +50,7 @@ public function __construct(CoreBootstrap $bootstrap = null)
      *
      * @return void
      */
-    protected function includeAndStartCoreBootstrap()
-    {
-        $classLoaderFilepath = $this->getClassLoaderFilepath();
-        $classLoader = require $classLoaderFilepath;
-
-        SystemEnvironmentBuilder::run(0, SystemEnvironmentBuilder::REQUESTTYPE_BE | SystemEnvironmentBuilder::REQUESTTYPE_CLI);
-        CoreBootstrap::initializeClassLoader($classLoader);
-        CoreBootstrap::baseSetup();
-    }
+    abstract protected function includeAndStartCoreBootstrap();

     /**
      * Initializes core cache handling
diff --git a/src/TestingFramework/Bootstrap/Bootstrap.php b/src/TestingFramework/Bootstrap/Bootstrap.php
index 27bfe31..1e47b4a 100644
--- a/src/TestingFramework/Bootstrap/Bootstrap.php
+++ b/src/TestingFramework/Bootstrap/Bootstrap.php
@@ -12,11 +12,28 @@
  * LICENSE file that was distributed with this source code.
  */

+use TYPO3\CMS\Core\Core\Bootstrap as CoreBootstrap;
+use TYPO3\CMS\Core\Core\SystemEnvironmentBuilder;
+
 /**
  * Unit Test Bootstrap for TYPO3 >= 9.2
  */
 class Bootstrap extends AbstractBootstrap
 {
+    /**
+     * Includes the Core Bootstrap class and calls its first few functions
+     *
+     * @return void
+     */
+    protected function includeAndStartCoreBootstrap()
+    {
+        $classLoaderFilepath = $this->getClassLoaderFilepath();
+        $classLoader = require $classLoaderFilepath;
+
+        SystemEnvironmentBuilder::run(0, SystemEnvironmentBuilder::REQUESTTYPE_BE | SystemEnvironmentBuilder::REQUESTTYPE_CLI);
+        $this->bootstrap = (null !== $this->bootstrap) ? $this->bootstrap : CoreBootstrap::init($classLoader);
+    }
+
     /**
      * Defines the constant ORIGINAL_ROOT for the path to the original TYPO3 document root
      *
diff --git a/src/TestingFramework/Bootstrap/BootstrapFactory.php b/src/TestingFramework/Bootstrap/BootstrapFactory.php
index 2ca496b..7dd6b6a 100644
--- a/src/TestingFramework/Bootstrap/BootstrapFactory.php
+++ b/src/TestingFramework/Bootstrap/BootstrapFactory.php
@@ -21,14 +21,12 @@ final class BootstrapFactory
      */
     public static function createBootstrapInstance()
     {
-        if (class_exists('TYPO3\\CMS\\Install\\Service\\ExtensionConfigurationService')) {
-            return new Bootstrap();
-        }
-
-        if (interface_exists('TYPO3Fluid\\Fluid\\View\\ViewInterface')) {
-            self::initializeCompatibilityLayer('v87');
-        } else {
-            self::initializeCompatibilityLayer('v76');
+        if (!class_exists('TYPO3\\CMS\\Install\\Service\\ExtensionConfigurationService')) {
+            if (interface_exists('TYPO3Fluid\\Fluid\\View\\ViewInterface')) {
+                self::initializeCompatibilityLayer('v87');
+            } else {
+                self::initializeCompatibilityLayer('v76');
+            }
         }

         return new Bootstrap();
diff --git a/src/TestingFramework/TestCase/FunctionalTestCase.php b/src/TestingFramework/TestCase/FunctionalTestCase.php
index 61097eb..8d95652 100644
--- a/src/TestingFramework/TestCase/FunctionalTestCase.php
+++ b/src/TestingFramework/TestCase/FunctionalTestCase.php
@@ -385,6 +385,12 @@ protected function setUpFrontendRootPage($pageId, array $typoScriptFiles = [])

         $this->getDatabaseConnection()->updateArray('pages', ['uid' => $pageId], $pagesFields);

+        // we need a proper SiteConfiguration starting with TYPO3 v10
+        $sitesDirectory = ORIGINAL_ROOT . '/../config/sites/' . $this->testSystem->getSystemIdentifier();
+        mkdir($sitesDirectory, 0777, true);
+
+        file_put_contents($sitesDirectory . '/config.yaml', "rootPageId: $pageId\nbase: /\nbaseVariants: { }\nlanguages: { }\nroutes: { }\nrouteEnhancers: { }");
+
         $templateFields = [
             'pid' => $pageId,
             'title' => '',
diff --git a/src/TestingFramework/TestCase/ViewHelperBaseTestcase.php b/src/TestingFramework/TestCase/ViewHelperBaseTestcase.php
index 50a384f..59af739 100644
--- a/src/TestingFramework/TestCase/ViewHelperBaseTestcase.php
+++ b/src/TestingFramework/TestCase/ViewHelperBaseTestcase.php
@@ -29,6 +29,7 @@
 use TYPO3\CMS\Fluid\Core\ViewHelper\TagBuilder;
 use TYPO3\CMS\Fluid\Core\ViewHelper\TemplateVariableContainer;
 use TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperVariableContainer;
+use TYPO3Fluid\Fluid\Core\Variables\StandardVariableProvider;
 use TYPO3Fluid\Fluid\Core\ViewHelper\ViewHelperInterface;

 /**
@@ -107,7 +108,10 @@ protected function setUp()
         $this->controllerContext->expects($this->any())->method('getRequest')->will($this->returnValue($this->request->reveal()));
         $this->arguments = [];

-        if (class_exists('TYPO3\\CMS\\Fluid\\Core\\Variables\\CmsVariableProvider')) {
+        if (class_exists('TYPO3Fluid\\Fluid\\Core\\Variables\\StandardVariableProvider')) {
+            $this->templateVariableContainer = $this->getMockBuilder(StandardVariableProvider::class)->getMock();
+            $this->tagBuilder = $this->getMockBuilder(\TYPO3Fluid\Fluid\Core\ViewHelper\TagBuilder::class)->getMock();
+        } elseif (class_exists('TYPO3\\CMS\\Fluid\\Core\\Variables\\CmsVariableProvider')) {
             $this->templateVariableContainer = $this->getMockBuilder(CmsVariableProvider::class)->getMock();
             $this->tagBuilder = new TagBuilder();
         } else {
diff --git a/src/TestingFramework/TestSystem/AbstractTestSystem.php b/src/TestingFramework/TestSystem/AbstractTestSystem.php
index d8c62ee..ff3214e 100644
--- a/src/TestingFramework/TestSystem/AbstractTestSystem.php
+++ b/src/TestingFramework/TestSystem/AbstractTestSystem.php
@@ -17,7 +17,6 @@
 use Nimut\TestingFramework\Exception\Exception;
 use Nimut\TestingFramework\File\NtfStreamWrapper;
 use TYPO3\CMS\Core\Core\Bootstrap;
-use TYPO3\CMS\Core\Core\SystemEnvironmentBuilder;
 use TYPO3\CMS\Core\Database\ConnectionPool;
 use TYPO3\CMS\Core\Utility\GeneralUtility;

@@ -98,7 +97,6 @@ abstract class AbstractTestSystem
     public function __construct($identifier, Bootstrap $bootstrap = null)
     {
         putenv('TYPO3_CONTEXT=Testing');
-        $this->bootstrap = $bootstrap === null ? Bootstrap::getInstance() : $bootstrap;
         $this->identifier = substr(sha1($identifier), 0, 7);
         $this->systemPath = ORIGINAL_ROOT . 'typo3temp/var/tests/functional-' . $this->identifier . '/';
     }
@@ -108,15 +106,7 @@ public function __construct($identifier, Bootstrap $bootstrap = null)
      *
      * @return void
      */
-    protected function includeAndStartCoreBootstrap()
-    {
-        $classLoaderFilepath = $this->getClassLoaderFilepath();
-        $classLoader = require $classLoaderFilepath;
-
-        SystemEnvironmentBuilder::run(0, SystemEnvironmentBuilder::REQUESTTYPE_BE | SystemEnvironmentBuilder::REQUESTTYPE_CLI);
-        Bootstrap::init($classLoader);
-        ob_end_clean();
-    }
+    abstract protected function includeAndStartCoreBootstrap();

     /**
      * Setup creates a test system and database
diff --git a/src/TestingFramework/TestSystem/TestSystem.php b/src/TestingFramework/TestSystem/TestSystem.php
index 3475098..51cf006 100644
--- a/src/TestingFramework/TestSystem/TestSystem.php
+++ b/src/TestingFramework/TestSystem/TestSystem.php
@@ -13,10 +13,27 @@
  */

 use Nimut\TestingFramework\Exception\Exception;
+use TYPO3\CMS\Core\Core\Bootstrap;
+use TYPO3\CMS\Core\Core\SystemEnvironmentBuilder;
 use TYPO3\CMS\Core\Database\ConnectionPool;

 class TestSystem extends AbstractTestSystem
 {
+    /**
+     * Includes the Core Bootstrap class and calls its first few functions
+     *
+     * @return void
+     */
+    protected function includeAndStartCoreBootstrap()
+    {
+        $classLoaderFilepath = $this->getClassLoaderFilepath();
+        $classLoader = require $classLoaderFilepath;
+
+        SystemEnvironmentBuilder::run(0, SystemEnvironmentBuilder::REQUESTTYPE_BE | SystemEnvironmentBuilder::REQUESTTYPE_CLI);
+        Bootstrap::init($classLoader);
+        ob_end_clean();
+    }
+
     /**
      * Extensions that are always loaded
      *
diff --git a/tests/Packages/testbase/Classes/ViewHelpers/RenderChildrenTYPO3CMSFluidViewHelper.php b/tests/Packages/testbase/Classes/ViewHelpers/RenderChildrenTYPO3CMSFluidViewHelper.php
new file mode 100644
index 0000000..f659c91
--- /dev/null
+++ b/tests/Packages/testbase/Classes/ViewHelpers/RenderChildrenTYPO3CMSFluidViewHelper.php
@@ -0,0 +1,40 @@
+<?php
+namespace Nimut\Testbase\ViewHelpers;
+
+/*
+ * This file is part of the NIMUT testing-framework project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read
+ * LICENSE file that was distributed with this source code.
+ */
+
+use TYPO3\CMS\Fluid\Core\Rendering\RenderingContextInterface;
+use TYPO3\CMS\Fluid\Core\ViewHelper\AbstractViewHelper;
+use TYPO3\CMS\Fluid\Core\ViewHelper\Facets\CompilableInterface;
+
+class RenderChildrenTYPO3CMSFluidViewHelper extends AbstractViewHelper implements CompilableInterface
+{
+    public function render()
+    {
+        return self::renderStatic(
+            $this->arguments,
+            $this->buildRenderChildrenClosure(),
+            $this->renderingContext
+        );
+    }
+
+    /**
+     * @param array $arguments
+     * @param \Closure $renderChildrenClosure
+     * @param RenderingContextInterface $renderingContext
+     * @return string
+     */
+    public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext)
+    {
+        return $renderChildrenClosure();
+    }
+}
diff --git a/tests/Packages/testbase/Classes/ViewHelpers/RenderChildrenViewHelper.php b/tests/Packages/testbase/Classes/ViewHelpers/RenderChildrenViewHelper.php
index 97cd1e0..f5b462b 100644
--- a/tests/Packages/testbase/Classes/ViewHelpers/RenderChildrenViewHelper.php
+++ b/tests/Packages/testbase/Classes/ViewHelpers/RenderChildrenViewHelper.php
@@ -12,11 +12,10 @@
  * LICENSE file that was distributed with this source code.
  */

-use TYPO3\CMS\Fluid\Core\Rendering\RenderingContextInterface;
-use TYPO3\CMS\Fluid\Core\ViewHelper\AbstractViewHelper;
-use TYPO3\CMS\Fluid\Core\ViewHelper\Facets\CompilableInterface;
+use TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface;
+use TYPO3Fluid\Fluid\Core\ViewHelper\AbstractViewHelper;

-class RenderChildrenViewHelper extends AbstractViewHelper implements CompilableInterface
+class RenderChildrenViewHelper extends AbstractViewHelper
 {
     public function render()
     {
diff --git a/tests/Packages/testbase/Tests/Functional/Fixtures/Templates/TemplateTYPO3CMSFluid.html b/tests/Packages/testbase/Tests/Functional/Fixtures/Templates/TemplateTYPO3CMSFluid.html
new file mode 100644
index 0000000..c968496
--- /dev/null
+++ b/tests/Packages/testbase/Tests/Functional/Fixtures/Templates/TemplateTYPO3CMSFluid.html
@@ -0,0 +1,3 @@
+{namespace t=Nimut\Testbase\ViewHelpers}
+
+<t:renderChildrenTYPO3CMSFluid>foo</t:renderChildrenTYPO3CMSFluid>
diff --git a/tests/Packages/testbase/Tests/Functional/Fixtures/TypoScript/PageTYPO3CMSFluid.ts b/tests/Packages/testbase/Tests/Functional/Fixtures/TypoScript/PageTYPO3CMSFluid.ts
new file mode 100644
index 0000000..1f3eece
--- /dev/null
+++ b/tests/Packages/testbase/Tests/Functional/Fixtures/TypoScript/PageTYPO3CMSFluid.ts
@@ -0,0 +1,23 @@
+config {
+    absRefPrefix = /
+    admPanel = 0
+    contentObjectExceptionHandler = 0
+    debug = 0
+    disableAllHeaderCode = 1
+    linkVars = L
+    no_cache = 1
+    sendCacheHeaders = 0
+    sys_language_uid = 0
+    sys_language_mode = ignore
+    sys_language_overlay = 1
+    xhtml_cleaning = 0
+}
+
+[globalVar = GP:L = 1]
+    config.sys_language_uid = 1
+[end]
+
+page = PAGE
+page.10 = FLUIDTEMPLATE
+page.10.file = EXT:testbase/Tests/Functional/Fixtures/Templates/TemplateTYPO3CMSFluid.html
+
diff --git a/tests/Packages/testbase/Tests/Functional/ViewHelpers/RenderChildrenViewHelperTest.php b/tests/Packages/testbase/Tests/Functional/ViewHelpers/RenderChildrenViewHelperTest.php
index 1e49010..81f60e7 100644
--- a/tests/Packages/testbase/Tests/Functional/ViewHelpers/RenderChildrenViewHelperTest.php
+++ b/tests/Packages/testbase/Tests/Functional/ViewHelpers/RenderChildrenViewHelperTest.php
@@ -37,7 +37,12 @@ public function ownTypoScripFileIsUsedInFrontendRequest()
     {
         $this->importDataSet('ntf://Database/pages.xml');

-        $this->setUpFrontendRootPage(1, ['EXT:testbase/Tests/Functional/Fixtures/TypoScript/Page.ts']);
+        if (class_exists('TYPO3Fluid\\Fluid\\Core\\ViewHelper\\AbstractViewHelper')) {
+            $this->setUpFrontendRootPage(1, ['EXT:testbase/Tests/Functional/Fixtures/TypoScript/Page.ts']);
+        } else {
+            // load template with view helper for pre v9 fluid
+            $this->setUpFrontendRootPage(1, ['EXT:testbase/Tests/Functional/Fixtures/TypoScript/PageTYPO3CMSFluid.ts']);
+        }

         $response = $this->getFrontendResponse(1);

diff --git a/tests/Packages/testbase/Tests/Unit/ViewHelpers/RenderChildrenViewHelperTest.php b/tests/Packages/testbase/Tests/Unit/ViewHelpers/RenderChildrenViewHelperTest.php
index 3b8a1f8..fdb7e34 100644
--- a/tests/Packages/testbase/Tests/Unit/ViewHelpers/RenderChildrenViewHelperTest.php
+++ b/tests/Packages/testbase/Tests/Unit/ViewHelpers/RenderChildrenViewHelperTest.php
@@ -12,6 +12,7 @@
  * LICENSE file that was distributed with this source code.
  */

+use Nimut\Testbase\ViewHelpers\RenderChildrenTYPO3CMSFluidViewHelper;
 use Nimut\Testbase\ViewHelpers\RenderChildrenViewHelper;
 use Nimut\TestingFramework\TestCase\ViewHelperBaseTestcase;
 use PHPUnit\Framework\MockObject\MockObject;
@@ -19,14 +20,20 @@
 class RenderChildrenViewHelperTest extends ViewHelperBaseTestcase
 {
     /**
-     * @var RenderChildrenViewHelper|MockObject
+     * @var RenderChildrenTYPO3CMSFluidViewHelper|MockObject
      */
     protected $viewHelper;

     protected function setUp()
     {
         parent::setUp();
-        $this->viewHelper = $this->getMockBuilder(RenderChildrenViewHelper::class)
+        if (class_exists('TYPO3Fluid\\Fluid\\Core\\ViewHelper\\AbstractViewHelper')) {
+            $renderChildrenViewHelperClass = RenderChildrenViewHelper::class;
+        } else {
+            $renderChildrenViewHelperClass = RenderChildrenTYPO3CMSFluidViewHelper::class;
+        }
+
+        $this->viewHelper = $this->getMockBuilder($renderChildrenViewHelperClass)
             ->setMethods(['renderChildren'])
             ->getMock();
         $this->injectDependenciesIntoViewHelper($this->viewHelper);
